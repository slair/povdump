--- "povray-3.8.0-beta.2\\vfe\\vfe.cpp"	2021-08-09 05:11:00.000000000 +0400
+++ "povdump-3.8.0-beta.2\\vfe\\vfe.cpp"	2022-12-16 01:42:07.467217300 +0400
@@ -1096,6 +1096,33 @@ State VirtualFrontEnd::Process()
             // case.
             return state;
           }
+			if (options.TryGetBool(kPOVAttrib_NoRender, false)) {
+
+				string slair_msg("=== No Render! Only dump to '");
+				slair_msg=slair_msg +
+					POVMS_UCS2toASCIIString(options.TryGetUCS2String(
+						kPOVAttrib_DumpFile, "/dev/shm/scene.dump"
+					)) + "' ===";
+
+				m_Session->AppendStatusMessage (slair_msg);
+				try {
+					shelloutProcessing->ProcessEvent(ShelloutProcessing::postFrame);
+				}
+				catch (pov_base::Exception& e) {
+					// if it's a kCannotOpenFileErr, it means permission to run the process was denied
+					// we don't set failed in that case as we allow shelloutprocessing to handle it
+					m_Session->AppendErrorAndStatusMessage (e.what());
+					if (!e.codevalid() || (e.code() != kCannotOpenFileErr))
+					{
+						m_Session->SetFailed();
+						return state = kFailed;
+					}
+				}
+				// check for cancel here: if the return value is true, state has already been changed
+				if (HandleShelloutCancel()) return state;
+
+				return state = kPostFrameShellout;
+			} else {
           try { viewId = renderFrontend.CreateView(sceneId, options, imageProcessing, boost::bind(&vfe::VirtualFrontEnd::CreateDisplay, this, _1, _2)); }
           catch(pov_base::Exception& e)
           {
@@ -1155,7 +1182,7 @@ State VirtualFrontEnd::Process()
             }
           }
           return state = kRendering;
-
+	  }
         default:
           // Do nothing special.
           return state;
