--- "povray-3.8.0-beta.2\\vfe\\vfe.cpp"	2021-08-09 05:11:00.000000000 +0400
+++ "povdump-3.8.0-beta.2\\vfe\\vfe.cpp"	2022-12-20 15:22:47.897551800 +0400
@@ -48,6 +48,8 @@
 #include "frontend/animationprocessing.h"
 #include "frontend/imageprocessing.h"
 
+#include "parser/dump.h"
+
 // this must be the last file included
 #include "base/povdebug.h"
 
@@ -1096,6 +1098,35 @@ State VirtualFrontEnd::Process()
             // case.
             return state;
           }
+		if (options.TryGetBool (kPOVAttrib_NoRender, false))
+		{
+			string slair_msg("=== No Render! Only dump to '");
+			slair_msg = slair_msg + POVMS_UCS2toASCIIString(
+				options.TryGetUCS2String(kPOVAttrib_DumpFile, SCENE_DUMP_NAME)
+			) + "' ===";
+			m_Session->AppendStatusMessage(slair_msg);
+			try
+			{
+				shelloutProcessing->ProcessEvent(ShelloutProcessing::postFrame);
+			}
+			catch (pov_base::Exception& e)
+			{
+				// if it's a kCannotOpenFileErr, it means permission to run the process was denied
+				// we don't set failed in that case as we allow shelloutprocessing to handle it
+				m_Session->AppendErrorAndStatusMessage (e.what());
+				if (!e.codevalid() || (e.code() != kCannotOpenFileErr))
+				{
+					m_Session->SetFailed();
+					return state = kFailed;
+				}
+			}
+			// check for cancel here: if the return value is true, state has already been changed
+			if (HandleShelloutCancel())
+				return state;
+			return state = kPostFrameShellout;
+		}
+		else
+		{
           try { viewId = renderFrontend.CreateView(sceneId, options, imageProcessing, boost::bind(&vfe::VirtualFrontEnd::CreateDisplay, this, _1, _2)); }
           catch(pov_base::Exception& e)
           {
@@ -1155,6 +1186,7 @@ State VirtualFrontEnd::Process()
             }
           }
           return state = kRendering;
+		}
 
         default:
           // Do nothing special.
